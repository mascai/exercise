/*
https://stepik.org/lesson/307328/step/4?unit=289416


Калькулятор

Имеется калькулятор, который выполняет следующие операции:

Умножить число XX на 22.
Умножить число XX на 33.
Прибавить к числу XX единицу.
Определите, какое наименьшее количество операций требуется, чтобы получить из числа 11 число NN.

Входные данные

Во входном файле написано натуральное число NN, не превосходящее 10^610 
6
 .

Выходные данные

В первой строке выходного файла выведите минимальное количество операций.

Во второй строке выведите числа, последовательно получающиеся при выполнении операций. Первое из них должно быть равно 11, а последнее NN. Если оптимальных последовательностей несколько, вы можете вывести любую.

*/

#include <bits/stdc++.h>

using namespace std;


int main() {
    int n;
    cin >> n;
    vector<int> dp(n+1, 0);
    for (int i = 2; i <= n; ++i) {
        if (i % 6 == 0) {
            dp[i] = min(dp[i - 1], min(dp[i / 2], dp[i / 3])) + 1;
        } else if (i % 3 == 0) {
             dp[i] = min(dp[i - 1], dp[i / 3]) + 1;
        } else if (i % 2 == 0) {
            dp[i] = min(dp[i - 1], dp[i / 2]) + 1;
        } else {
            dp[i] = dp[i - 1] + 1;
        }
    }
    vector<int> way;
    way.push_back(n);
    while (n > 1) {
        if (dp[n] - dp[n - 1] == 1) {
            --n;
        } else if (n % 2 == 0 and dp[n] - dp[n / 2] == 1) {
            n /= 2;
        } else if (n % 3 == 0 and dp[n] - dp[n / 3] == 1) {
            n /= 3;
        }
        way.push_back(n);
    }
    // Print result min way to convert 1 to n
    cout << way.size() - 1 << endl;
    for (int i = way.size() - 1; i >= 0; --i) {
        cout << way[i] << ' ';
    } 
    return 0;
}
