'''
На физкультуре происходит разбиение по двум командам. Ребята выстроены в шеренгу, у каждо-

го из них есть свой рост ﻿a_ia 
i
​	
 ﻿. Разбиение по командам произойдет по принципу «четный-нечетный» — все школьники с четным ростом отправляются в одну команду, а нечетные — в другую.

В отличие от привычного урока, ребята не выстроились по росту. Вместо привычного порядка

они встали случайно. Теперь физрук Яша смотрит на шеренгу и думает — может ли ровно одна

пара учеников поменяться местами так, чтобы команды оказались такими же, как и по принци-

пу «первый-второй». Иначе говоря, он хочет получить такой порядок, при котором все ученики с

четным ростом стоят на четных позициях, а с нечетным — на нечетных.

Помогите Яше найти нужную замену.


Формат входных данных
В первой строке находится число ﻿nn﻿ (﻿2 \leq n \leq 10002≤n≤1000﻿) — количество учеников в шеренге. В следующей строке находятся ﻿nn﻿ натуральных чисел ﻿a_ia 
i
​	
 ﻿ (﻿1 \leq a_i \leq 10^91≤a 
i
​	
 ≤10 
9
 ﻿ ) — рост учеников.

Формат выходных данных
В единственной строке выведите ﻿ii﻿ и ﻿jj﻿ — номера элементов, которые нужно поменять местами, чтобы добиться заданного условия (﻿1 \leq i1≤i﻿, ﻿j \leq nj≤n﻿, ﻿i \neq ji 

​	
 =j﻿). Если ответов несколько — разрешается вывести любой. Если не существует способа поменять два элемента местами — выведите -1 -1.

Замечание. В первом примере хотя бы один ученик с четным ростом будет стоять на нечетной позиции. Во втором тесте замена приведет к неправильному состоянию. В третьем тесте из условия замена приведет шеренгу к валидному состоянию [1,2].

Примеры данных
Пример 1
4
2 1 4 6
-1 -1
Пример 2
2
1 2
-1 -1
Пример 3
2
2 1
1 2

'''
n = int(input())
arr = [int(i) for i in (input().split())]

cnt = [] # list of pairs (val, id)
for i in range(len(arr)):
    cnt.append((arr[i], i + 1))

cnt.sort(reverse=True)
bad_even = None
cnt_bad_even = 0
cnt_bad_odd = 0
bad_odd = None

for i in range(len(cnt)):
    val = cnt[i][0]
    curid = cnt[i][1]
    if val % 2 != curid % 2:
        if val % 2 == 1:
            cnt_bad_odd += 1
            if cnt_bad_odd == 1:
                bad_odd = curid
        else:
            cnt_bad_even += 1
            if cnt_bad_even == 1:
                bad_even = curid

if cnt_bad_even == 0 or cnt_bad_odd == 0 or cnt_bad_even > 1 or cnt_bad_odd > 1:
    print(-1, -1)
else:
    print(min(bad_even, bad_odd), max(bad_even, bad_odd))



